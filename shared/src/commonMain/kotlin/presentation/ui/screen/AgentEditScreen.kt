package presentation.ui.screen

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.Check
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import domain.model.Agent

/**
 * Êô∫ËÉΩ‰ΩìÁºñËæëÁïåÈù¢
 * ÊîØÊåÅÂàõÂª∫Êñ∞Êô∫ËÉΩ‰ΩìÂíåÁºñËæëÁé∞ÊúâÊô∫ËÉΩ‰Ωì
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AgentEditScreen(
    agent: Agent? = null,
    onBackClick: () -> Unit,
    onSaveClick: (name: String, description: String, systemPrompt: String, avatar: String) -> Unit
) {
    var name by remember { mutableStateOf(agent?.name ?: "") }
    var description by remember { mutableStateOf(agent?.description ?: "") }
    var systemPrompt by remember { mutableStateOf(agent?.systemPrompt ?: "") }
    var avatar by remember { mutableStateOf(agent?.avatar ?: "") }
    
    val isEditing = agent != null
    val canSave = name.isNotBlank() && systemPrompt.isNotBlank()

    Scaffold(
        topBar = {
            TopAppBar(
                title = { 
                    Text(
                        text = if (isEditing) "ÁºñËæëÊô∫ËÉΩ‰Ωì" else "ÂàõÂª∫Êô∫ËÉΩ‰Ωì",
                        fontWeight = FontWeight.Bold
                    )
                },
                navigationIcon = {
                    IconButton(onClick = onBackClick) {
                        Icon(
                            imageVector = Icons.Default.ArrowBack,
                            contentDescription = "ËøîÂõû"
                        )
                    }
                },
                actions = {
                    IconButton(
                        onClick = { 
                            if (canSave) {
                                onSaveClick(name, description, systemPrompt, avatar)
                            }
                        },
                        enabled = canSave
                    ) {
                        Icon(
                            imageVector = Icons.Default.Check,
                            contentDescription = "‰øùÂ≠ò"
                        )
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.surface
                )
            )
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
                .padding(16.dp)
                .verticalScroll(rememberScrollState()),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // ÂêçÁß∞ËæìÂÖ•
            OutlinedTextField(
                value = name,
                onValueChange = { name = it },
                label = { Text("Êô∫ËÉΩ‰ΩìÂêçÁß∞") },
                placeholder = { Text("‰∏∫‰Ω†ÁöÑÊô∫ËÉΩ‰ΩìËµ∑‰∏™ÂêçÂ≠ó") },
                modifier = Modifier.fillMaxWidth(),
                singleLine = true,
                isError = name.isBlank()
            )
            
            // ÊèèËø∞ËæìÂÖ•
            OutlinedTextField(
                value = description,
                onValueChange = { description = it },
                label = { Text("ÊèèËø∞") },
                placeholder = { Text("ÁÆÄÂçïÊèèËø∞Ëøô‰∏™Êô∫ËÉΩ‰ΩìÁöÑÂäüËÉΩÂíåÁâπÁÇπ") },
                modifier = Modifier.fillMaxWidth(),
                maxLines = 3
            )
            
            // Â§¥ÂÉèËæìÂÖ•ÔºàÂèØÈÄâÔºâ
            OutlinedTextField(
                value = avatar,
                onValueChange = { avatar = it },
                label = { Text("Â§¥ÂÉè (ÂèØÈÄâ)") },
                placeholder = { Text("ËæìÂÖ•emojiÊàñÂ§¥ÂÉèURL") },
                modifier = Modifier.fillMaxWidth(),
                singleLine = true
            )
            
            // Á≥ªÁªüÊèêÁ§∫ËØçËæìÂÖ•
            OutlinedTextField(
                value = systemPrompt,
                onValueChange = { systemPrompt = it },
                label = { Text("Á≥ªÁªüÊèêÁ§∫ËØç") },
                placeholder = { Text("ÂÆö‰πâÊô∫ËÉΩ‰ΩìÁöÑËßíËâ≤„ÄÅË°å‰∏∫ÂíåÂõûÁ≠îÈ£éÊ†º...") },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(200.dp),
                isError = systemPrompt.isBlank()
            )
            
            // ÊèêÁ§∫‰ø°ÊÅØ
            Card(
                modifier = Modifier.fillMaxWidth(),
                colors = CardDefaults.cardColors(
                    containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.5f)
                )
            ) {
                Column(
                    modifier = Modifier.padding(16.dp),
                    verticalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    Text(
                        text = "üí° ÊèêÁ§∫",
                        style = MaterialTheme.typography.titleSmall,
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                    Text(
                        text = "‚Ä¢ Á≥ªÁªüÊèêÁ§∫ËØçÊòØÊô∫ËÉΩ‰ΩìÁöÑÊ†∏ÂøÉÔºåÂÆÉÂÆö‰πâ‰∫ÜAIÁöÑËßíËâ≤ÂíåË°å‰∏∫ÊñπÂºè",
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                    Text(
                        text = "‚Ä¢ Â∞ΩÈáèÂÖ∑‰ΩìÊèèËø∞‰Ω†Â∏åÊúõÊô∫ËÉΩ‰ΩìÂ¶Ç‰ΩïÂõûÁ≠îÈóÆÈ¢ò",
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                    Text(
                        text = "‚Ä¢ ÂèØ‰ª•ÂåÖÂê´‰∏ì‰∏öÈ¢ÜÂüü„ÄÅËØ≠Ë®ÄÈ£éÊ†º„ÄÅÂõûÁ≠îÊ†ºÂºèÁ≠âË¶ÅÊ±Ç",
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
            }
            
            // Á§∫‰æãÊèêÁ§∫ËØç
            if (!isEditing && systemPrompt.isBlank()) {
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(
                        containerColor = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f)
                    )
                ) {
                    Column(
                        modifier = Modifier.padding(16.dp),
                        verticalArrangement = Arrangement.spacedBy(8.dp)
                    ) {
                        Text(
                            text = "üìù Á§∫‰æãÊèêÁ§∫ËØç",
                            style = MaterialTheme.typography.titleSmall,
                            fontWeight = FontWeight.Bold,
                            color = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                        
                        val examples = listOf(
                            "ÁºñÁ®ãÂä©Êâã" to "‰Ω†ÊòØ‰∏Ä‰∏™‰∏ì‰∏öÁöÑÁºñÁ®ãÂä©ÊâãÔºåÊìÖÈïøÂ§öÁßçÁºñÁ®ãËØ≠Ë®Ä„ÄÇËØ∑Áî®ÁÆÄÊ¥ÅÊòé‰∫ÜÁöÑÊñπÂºèÂõûÁ≠îÊäÄÊúØÈóÆÈ¢òÔºåÊèê‰æõÂèØËøêË°åÁöÑ‰ª£Á†ÅÁ§∫‰æãÔºåÂπ∂Ëß£ÈáäÂÖ≥ÈîÆÊ¶ÇÂøµ„ÄÇ",
                            "ÂàõÊÑèÂÜôÊâã" to "‰Ω†ÊòØ‰∏Ä‰∏™ÂØåÊúâÂàõÊÑèÁöÑÂÜô‰ΩúÂä©ÊâãÔºåÊìÖÈïøÂêÑÁßçÊñá‰ΩìÂàõ‰Ωú„ÄÇËØ∑Áî®ÁîüÂä®ÊúâË∂£ÁöÑËØ≠Ë®ÄÈ£éÊ†ºÔºåÂ∏ÆÂä©Áî®Êà∑ËøõË°åÂàõÊÑèÂÜô‰Ωú„ÄÅÊïÖ‰∫ãÊûÑÊÄùÂíåÊñáÊ°àÂàõ‰Ωú„ÄÇ",
                            "Â≠¶‰π†ÂØºÂ∏à" to "‰Ω†ÊòØ‰∏Ä‰∏™ËÄêÂøÉÁöÑÂ≠¶‰π†ÂØºÂ∏àÔºåÂñÑ‰∫éÁî®ÈÄö‰øóÊòìÊáÇÁöÑÊñπÂºèËß£ÈáäÂ§çÊùÇÊ¶ÇÂøµ„ÄÇËØ∑Âæ™Â∫èÊ∏êËøõÂú∞ÊïôÂ≠¶ÔºåÂ§öÁî®ÊØîÂñªÂíåÂÆû‰æãÔºåÁ°Æ‰øùÂ≠¶ÁîüËÉΩÂ§üÁêÜËß£„ÄÇ"
                        )
                        
                        examples.forEach { (title, prompt) ->
                            TextButton(
                                onClick = { systemPrompt = prompt },
                                modifier = Modifier.fillMaxWidth()
                            ) {
                                Column(
                                    modifier = Modifier.fillMaxWidth()
                                ) {
                                    Text(
                                        text = title,
                                        style = MaterialTheme.typography.labelMedium,
                                        fontWeight = FontWeight.Bold
                                    )
                                    Text(
                                        text = prompt.take(50) + "...",
                                        style = MaterialTheme.typography.bodySmall,
                                        color = MaterialTheme.colorScheme.onSurfaceVariant
                                    )
                                }
                            }
                        }
                    }
                }
            }
            
            // Â∫ïÈÉ®Èó¥Ë∑ù
            Spacer(modifier = Modifier.height(32.dp))
        }
    }
}